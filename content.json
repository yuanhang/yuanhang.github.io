{"meta":{"title":"Yuanhang's Blog","subtitle":null,"description":null,"author":"Yuanhang Guo","url":"https://yuanhang.io","root":"/"},"pages":[{"title":"tags","date":"2019-04-06T12:19:26.000Z","updated":"2019-04-06T12:28:04.000Z","comments":false,"path":"tags/index.html","permalink":"https://yuanhang.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-04-06T12:19:37.000Z","updated":"2019-04-06T12:28:04.000Z","comments":false,"path":"categories/index.html","permalink":"https://yuanhang.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Unit Test in Spring MVC","slug":"Unit-Test-in-Spring-MVC","date":"2019-07-07T10:12:28.000Z","updated":"2019-07-09T00:06:33.635Z","comments":true,"path":"2019/07/07/Unit-Test-in-Spring-MVC/","link":"","permalink":"https://yuanhang.io/2019/07/07/Unit-Test-in-Spring-MVC/","excerpt":"","text":"Unit Test in Spring MVCMock为什么使用Mock，因为单元测试不是集成测试，应该集中在当前的逻辑，对于其他的依赖应该假定符合预期而不应该重复测试。但是隔离依赖需要大量的重复工作和设计上的支持，有些遗留代码没有很好的隔离依赖的设计支持但又需要测试。Mock技术就是为了解决这些问题。 Mock可以解决哪些问题？ verify: 对mock对象的行为进行控制 某个对象上的某个方法会被以某种参数调用预期的次数 mock对象（及方法）被调用的顺序，先调用A，再调用的B mock对象（及方法）从来没有被调用 stub: 对mock对象的行为进行控制 某个对象上的某个方法以某种参数被调用时，会返回预期的结果 mock对象的某个方法，以同样的参数被调用，返回不同的结果 spy: 对真实对象（非mock）对象进行verify、stub（通常用于对于遗留代码的测试工作）。 Junit 5, Spring Boot 1.5.2, MockitoDependenciesAdd denpendencies in build.gradle123456789testCompile('org.springframework.boot:spring-boot-starter-test')testCompile('org.junit.jupiter:junit-jupiter-api:5.2.0')testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0')// This is to use junit 5 with Spring 4.x (Spring Boot 1.x)testCompile('com.github.sbrannen:spring-test-junit5:1.2.0')testCompile('org.mockito:mockito-junit-jupiter:2.19.0')testCompile('org.mockito:mockito-core:2.19.0') Hello World12345678910111213141516171819202122232425262728293031323334353637383940414243444546package io.yuanhang.demo.controllerimport org.junit.jupiter.api.Assertions.assertNotNullimport org.junit.jupiter.api.BeforeAllimport org.junit.jupiter.api.DisplayNameimport org.junit.jupiter.api.Testimport org.junit.jupiter.api.TestInstanceimport org.junit.jupiter.api.extension.ExtendWithimport org.springframework.beans.factory.annotation.Autowiredimport org.springframework.boot.test.context.SpringBootTestimport org.springframework.test.context.junit.jupiter.SpringExtensionimport org.springframework.test.web.servlet.MockMvcimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders.getimport org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrlimport org.springframework.test.web.servlet.result.MockMvcResultMatchers.statusimport org.springframework.test.web.servlet.setup.MockMvcBuildersimport org.springframework.web.context.WebApplicationContextimport org.springframework.context.annotation.Configuration@ExtendWith(SpringExtension::class)@TestInstance(TestInstance.Lifecycle.PER_CLASS)@SpringBootTest(classes = [TestContext::class])class CommonControllerTest &#123; @Autowired private lateinit var wac: WebApplicationContext private lateinit var mockMvc: MockMvc @BeforeAll fun setup() &#123; mockMvc = MockMvcBuilders.webAppContextSetup(wac).build() &#125; @Test @DisplayName(\"Wrong path should get 404\") fun incorrectPath() &#123; assertNotNull(mockMvc) mockMvc.perform(get(\"/not-exist-path\")) .andExpect(status().isNotFound) .andExpect(forwardedUrl(null)) &#125;&#125;@Configurationclass TestContext @ExtendWith(SpringExtension::class)是JUnit 5的新的设计，通过ExtendWith注解来扩展JUnit。 SpringExtension来自com.github.sbrannen:spring-test-junit5:1.5.0，是为JUnit5增加Spring TestContext Framework的支持，其中包括一个适用于Spring的Runner取代JUnit默认的Runner来跑测试。 ⚠️注意：SpringBootTest提供一些SpringBoot的feature，如embedded web server（默认不开启，是MOCK）、@MockBean，可用于集成测试，也可用于单元测试。具体可参考SpringBoot官方文档。 Mock in Spring MVC考虑如下设定：AccountController持有AccountClient的引用，正常情况下通过调用AccountClient上的方法完成请求。我们要测试的对象是AccountController。需要测是的内容包括： 错误的签名会得到400的返回值 正确但过期的签名会得到400的返回值 正确且不过期的签名会得到正常的ResponseA 因为要测试的对象是AccountController，所以我们应该假定AccountClient（外部依赖）的行为是没有问题的。为此需要Mock AccountClient，来控制其行为，以测试AccountController的行为。 AccountController.kt1234567891011121314151617181920@RequestMapping(path = [\"/accounts\"], produces = [MediaType.APPLICATION_JSON_UTF8_VALUE])@RestControllerclass AccountController &#123; @Autowired private lateinit var accountClient: AccountClient @RequestMapping(value = [\"/\"], method = [RequestMethod.POST]) fun createSomething(@RequestBody signature: Signature): SomeResponseA &#123; if (doSomeSignatureChecking(signature)) &#123; throw CustomException(400, \"Wrong signature\", \"无效的签名\") &#125; val timeOffset = abs(TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis()) - signature.timestamp) if (timeOffset &gt; 3600) &#123; throw CustomException(400, \"Signature expired\", \"签名已过期\") &#125; return accountClient.createSomething() &#125;&#125; AccountControllerTest.kt123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110import io.yuanhang.demo.boot.controller.ExceptionControllerAdviceimport io.yuanhang.demo.core.utils.toJsonimport io.yuanhang.demo.serviceA.feign.AccountClientimport org.junit.jupiter.api.Assertions.assertEqualsimport org.junit.jupiter.api.BeforeAllimport org.junit.jupiter.api.DisplayNameimport org.junit.jupiter.api.Nestedimport org.junit.jupiter.api.Testimport org.junit.jupiter.api.TestInstanceimport org.junit.jupiter.api.extension.ExtendWithimport org.mockito.InjectMocksimport org.mockito.Mockimport org.mockito.Mockito.`when`import org.mockito.Mockito.verifyZeroInteractionsimport org.mockito.MockitoAnnotationsimport org.springframework.boot.test.context.SpringBootTestimport org.springframework.http.MediaTypeimport org.springframework.test.context.junit.jupiter.SpringExtensionimport org.springframework.test.web.servlet.MockMvcimport org.springframework.test.web.servlet.request.MockMvcRequestBuildersimport org.springframework.test.web.servlet.result.MockMvcResultMatchersimport org.springframework.test.web.servlet.setup.MockMvcBuildersimport java.util.concurrent.TimeUnit@ExtendWith(SpringExtension::class)@TestInstance(TestInstance.Lifecycle.PER_CLASS)@DisplayName(\"Account Test\")internal class AccountControllerTest &#123; private lateinit var mockMvc: MockMvc @Mock private lateinit var mockAccountClient: AccountClient @InjectMocks private lateinit var accountController: AccountController @BeforeAll fun setup() &#123; MockitoAnnotations.initMocks(this) mockMvc = MockMvcBuilders .standaloneSetup(accountController) .setControllerAdvice(ExceptionControllerAdvice()) .build() &#125; @Nested @DisplayName(\"When Create Id\") inner class WhenCreatedId &#123; private val path = \"/accounts/\" @Nested @DisplayName(\"When invalid signature\") inner class WhenWithInvalidSignature &#123; @Test @DisplayName(\"throws Wrong signature when wrong signature\") fun throwsWrongSignature() &#123; val invalidSignature = &#123;...&#125; val resultActions = mockMvc.perform( MockMvcRequestBuilders.post(path) .contentType(MediaType.APPLICATION_JSON_UTF8) .content(invalidSignature.toJson())) .andExpect(MockMvcResultMatchers.status().isBadRequest) val response = resultActions.parseResponse&lt;SomeRessponseB&gt;() assertEquals(\"Wrong signature\", response.message) assertEquals(\"无效的签名\", response.userMessage) verifyZeroInteractions(mockAccountClient) &#125; @Test @DisplayName(\"throws Signature expired when expired signature\") fun throwsExpiredSignature() &#123; val expiredSignature = &#123;...&#125; val resultActions = mockMvc.perform( MockMvcRequestBuilders.post(path) .contentType(MediaType.APPLICATION_JSON_UTF8) .content(expiredSignature.toJson())) .andExpect(MockMvcResultMatchers.status().isBadRequest) val response = resultActions.parseResponse&lt;SomeRessponseB&gt;() assertEquals(\"Signature expired\", response.message) assertEquals(\"签名已过期\", response.userMessage) verifyZeroInteractions(mockAccountClient) &#125; &#125; @Nested @DisplayName(\"When valid signature\") inner class WhenWithValidSignature &#123; private val validSignature = &#123;...&#125; @Test @DisplayName(\"Request to create Id will be redirected to ServiceA\") fun delegateToAccountClient() &#123; val expected = &#123;...&#125; `when`(mockAccountClient.createSomething()).thenReturn(expected) val actual = mockMvc.perform( MockMvcRequestBuilders.post(path) .contentType(MediaType.APPLICATION_JSON_UTF8) .content(validSignature.toJson())) .andExpect(MockMvcResultMatchers.status().isOk) .parseResponse&lt;SomeResponseA&gt;() assertEquals(expected, actual) &#125; &#125; &#125;&#125;inline fun &lt;reified T&gt; ResultActions.parseResponse(): T &#123; return this.andReturn().response.contentAsString.parseJson()&#125; 隔离不需要的依赖如果使用SpringBootTest，可以在@SpringBootTest(classes = [TestContext::class])中通过classes指定TestContext来取代默认行为（search for SpringBootConfiguration， included in SpringBootApplication），避免load不需要的依赖，如database repository。 ⚠️注意：如果使用@Bean, @Autowired等spring的依赖注入能力，当使用Mockito.mock()如果用于class的mock时，仍然会递归的寻找被Mock对象中所有@Autowired的部分，所以如果class中存在其他依赖（如database、其他服务的client）则也需要mock。 这里更好的做法是mockinterface而不是class。mock interface就不存在实例化及mock其他依赖的问题。 另一种做法是不使用spring依赖注入的功能，转而使用Mockito提供的@Mock、@InjectMocks来完成mock对象及被测试主体（依赖mock对象，所以才需要mock）的实例化。如上面的例子。 12345@Mockprivate lateinit var mockAccountClient: AccountClient@InjectMocksprivate lateinit var accountController: AccountController Mock AccountClient我们使用Mockito来完成Mock的部分。Mock AccountClient包括两个部分：1、提供一个Mock AccountClient2、将其注入进入AccountController3、设定Mock AccountClient的行为（stub） 使用@Mock注解可以完成Step 1。根据Mockito的文档，需要使用MockitoAnnotations.initMocks(this)来初始化Mock。 @Mock和Mockito.mock()基本上是一致的，推荐使用@Mock。一是更为简洁明了，二在报错时可以提供property的名字，更容易debug。 使用@InjectMocks注解标注AccountController，并指定MockMvc使用该AccountController，可以完成将Mock对象注入AccountController并进行测试的目的。为了处理CustomException，这里还设置mockMvc使用ControllerAdvice。1234mockMvc = MockMvcBuilders .standaloneSetup(accountController) .setControllerAdvice(ExceptionControllerAdvice()) .build() 使用when().thenReturn, verifyZeroInteractions()来设定Mock的行为及做出验证。123`when`(mockAccountClient.createSomething()).thenReturn(expected)verifyZeroInteractions(mockAccountClient) 为了方便对MockMvc得到的response做验证，这里写了一个小的方法来帮助把ResultActions中Response的JSON string反序列化为Model。123inline fun &lt;reified T&gt; ResultActions.parseResponse(): T &#123; return this.andReturn().response.contentAsString.parseJson()&#125; 这里要求API response中返回值的类型为application/json，可以通过在Controller中设定@RequestMapping(path = [&quot;/accounts&quot;], produces = [MediaType.APPLICATION_JSON_UTF8_VALUE])来完成。 单元测试的组织结构JUnit 5文档中建议通过@Nested注解嵌套class来表达测试用例之间的关系。1234567891011121314151617181920212223242526272829303132@ExtendWith(SpringExtension::class)@TestInstance(TestInstance.Lifecycle.PER_CLASS)@SpringBootTest@DisplayName(\"Account Test\")internal class AccountControllerTest &#123; @Nested @DisplayName(\"When Create Id\") inner class WhenCreatedId &#123; @Nested @DisplayName(\"When invalid signature\") inner class WhenWithInvalidSignature &#123; @Test @DisplayName(\"throws Wrong signature when wrong signature\") fun throwsWrongSignature() &#123; &#125; @Test @DisplayName(\"throws Signature expired when expired signature\") fun throwsExpiredSignature() &#123; &#125; &#125; @Nested @DisplayName(\"When valid signature\") inner class WhenWithValidSignature &#123; @Test @DisplayName(\"Request to create Id will be redirected to ServiceA\") fun delegateToAccountClient() &#123; &#125; &#125; &#125;&#125; FAQAPI路径存在却在测试时返回404 检查Spring启动的时候的RequestMappingHandlerMapping，POST /accounts和POST /accounts/是不同的。 打开Spring的DEBUG Log来得到更多信息。在application.yml中加入以下信息1234logging: level: org.springframework.web: DEBUG org.springframework.security: DEBUG Share Logic in tests between projects标准java工程分为两个部分，main和test。相应的，gradle提供了compile和testCompile两个target来处理依赖。如果我们想要在Project之间共享测试的逻辑，如ResultActions.parseResponse()123inline fun &lt;reified T&gt; ResultActions.parseResponse(): T &#123; return this.andReturn().response.contentAsString.parseJson()&#125; 那么，就需要在gradle中指明测试的依赖12compile project(':project-contains-shared-logic-under-its-test-folder') // for non-test dependency if neededtestCompile project(':project-contains-shared-logic-under-its-test-folder').sourceSets.test.output 当依赖是list of Mocks有些时候的依赖是一个List，里面的每一个元素都需要是mock。这个时候因为不需要mock List本身的行为（iterate等等），所以使用@Spy。12345678910111213141516171819202122class Test &#123; @Mock private var mockItem: Item = mock(Item::class.java) @Spy private var mockedItems: List&lt;Item&gt; = mutableListOf(mockItem) @InjectMocks private lateinit var subject: ToBeTested @Test fun test() &#123; `when`(mockItem.xxxx).thenReturn(xxx) ... &#125;&#125;class ToBeTested &#123; @Autowired private lateinit var items: List&lt;Item&gt;&#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://yuanhang.io/tags/java/"},{"name":"Spring MVC","slug":"Spring-MVC","permalink":"https://yuanhang.io/tags/Spring-MVC/"},{"name":"Unit Test","slug":"Unit-Test","permalink":"https://yuanhang.io/tags/Unit-Test/"}]},{"title":"Spring Boot for console application","slug":"Spring-Boot-for-console-application","date":"2019-04-30T10:09:10.000Z","updated":"2019-04-30T10:09:31.000Z","comments":true,"path":"2019/04/30/Spring-Boot-for-console-application/","link":"","permalink":"https://yuanhang.io/2019/04/30/Spring-Boot-for-console-application/","excerpt":"","text":"Spring Boot for console applicationTo start a hello world console/command line application using Spring Boot, first we need to add dependency to spring-boot. 123dependencies &#123; compile(\"org.springframework.boot:spring-boot-starter\")&#125; Then create main as entrypoint of our jar. 12345678910111213141516171819202122package io.yuanhang.consolesampleimport org.springframework.boot.CommandLineRunnerimport org.springframework.boot.autoconfigure.SpringBootApplicationimport org.springframework.boot.builder.SpringApplicationBuilderimport org.springframework.stereotype.Componentimport java.lang.System.exit@SpringBootApplicationclass ConsoleSampleApplication@Componentclass Helloworld : CommandLineRunner &#123; override fun run(vararg args: String?) &#123; println(\"hello world\") exit(0) &#125;&#125;fun main(args: Array&lt;String&gt;) &#123; SpringApplicationBuilder(ConsoleSampleApplication::class.java).web(false).run(*args)&#125; Note: to prevent embeded tomcat being started, we added .web(false). This will set this.webEnvironment = false inside Spring Boot.","categories":[],"tags":[{"name":"kotlin","slug":"kotlin","permalink":"https://yuanhang.io/tags/kotlin/"},{"name":"IntelliJ","slug":"IntelliJ","permalink":"https://yuanhang.io/tags/IntelliJ/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://yuanhang.io/tags/Spring-Boot/"}]},{"title":"Connect Application.yml and @ConfigurationProperties in IntelliJ","slug":"Connect-Application-yml-and-ConfigurationProperties-in-IntelliJ","date":"2019-04-25T10:15:57.000Z","updated":"2019-04-28T12:06:58.000Z","comments":true,"path":"2019/04/25/Connect-Application-yml-and-ConfigurationProperties-in-IntelliJ/","link":"","permalink":"https://yuanhang.io/2019/04/25/Connect-Application-yml-and-ConfigurationProperties-in-IntelliJ/","excerpt":"","text":"Connect Application.yml and @ConfigurationProperties in IntelliJSometimes IntelliJ complains about “cannot resolve configuration property ‘a.b.c’”. Here is how to solve it.Spring Boot provides details of configuration properties via a file under resources/META-INF/spring-configuration-metadata.json. It looks like this (see Appendix B. Configuration Metadata for more details):12345678910111213141516171819202122&#123; \"hints\": [], \"groups\": [ &#123; \"sourceType\": \"io.yuanhang.sample.config.property.logProperties\", \"name\": \"dummyLog\", \"type\": \"io.yuanhang.sample.config.property.logProperties\" &#125; ], \"properties\": [ &#123; \"sourceType\": \"io.yuanhang.sample.config.property.logProperties\", \"name\": \"dummyLog.access-key-id\", \"type\": \"java.lang.String\" &#125;, &#123; \"sourceType\": \"io.yuanhang.sample.config.property.logProperties\", \"name\": \"dummyLog.access-key-secret\", \"type\": \"java.lang.String\" &#125; ]&#125; While we don’t want to maintain the config by hand, we can utilize a dependency to generate spring-configuration-metadata.json for us. It is spring-boot-configuration-processor. For gradle, 1234567dependencies &#123; // To resolve properties in yml // To generate `spring-configuration-metadata.json` kapt \"org.springframework.boot:spring-boot-configuration-processor\" // To add `spring-boot-configuration-processor` into classpath implementation \"org.springframework.boot:spring-boot-configuration-processor\"&#125; After add the dependency, just refresh gradle projects in your IntelliJ then you will find that the complain is gone. If not, try gradle clean build in your IntelliJ. If you are interested, spring-boot-configuration-processor will generate spring-configuration-metadata.json under sample/build/tmp/kapt3/classes/main/META-INF/.","categories":[],"tags":[{"name":"kotlin","slug":"kotlin","permalink":"https://yuanhang.io/tags/kotlin/"},{"name":"IntelliJ","slug":"IntelliJ","permalink":"https://yuanhang.io/tags/IntelliJ/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://yuanhang.io/tags/Spring-Boot/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-04-06T11:12:18.000Z","updated":"2019-04-06T11:12:18.000Z","comments":true,"path":"2019/04/06/hello-world/","link":"","permalink":"https://yuanhang.io/2019/04/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Rails Stack - MongoDB, Bootstrap","slug":"rails-stack-mongodb-bootstrap","date":"2015-02-28T05:15:00.000Z","updated":"2019-04-06T11:34:02.000Z","comments":true,"path":"2015/02/28/rails-stack-mongodb-bootstrap/","link":"","permalink":"https://yuanhang.io/2015/02/28/rails-stack-mongodb-bootstrap/","excerpt":"","text":"Rails Stack - MongoDBIntroductionThis is an introduction of creating rails stack together with MongoDB.The tech stack includes: Rails MongoDB Bootstrap AngularJS Bower Capistrano Nginx RSpec Create a rails applicationIt seems that TurboLinks does not play well with AngularJS. So we will not enable TurboLinks when we create the rails application.Since we will use RSpec, here we skip the test-unit too (-T). 1rails new -T --skip-turbolinks rails-stack-mongo You might want to add config/secrets.yml and config/database.yml into .gitignore to avoid expose them. If you’ve already checked in those two files and want to remove them. Try the following: 1git rm config/secrets.yml config/database.yml Setup BowerWe will use bower to manage the front-end libraries, including bootstrap. So here we need to setup bower first. Install BowerOS X: 1sudo npm install -g bower Ubuntu: 1234sudo apt-get updatesudo apt-get install nodejs npmsudo npm install -g bowersudo ln -s /usr/bin/nodejs /usr/bin/node In case the git:// protocol is not working in your network, you can let git to replace git:// with https://. 1git config --global url.\"https://\".insteadOf git:// Use Bower in RailsWe will use bower-rails to mange bower related actions. The main reason we use this gem instead of using bower directly is that, this gem provides a helper task rake bower:resolve to deal with the assets path problem in rails. For example in rails, we might found that the Glyphicons work well in development, but will raise 404 - not found on production. By using bower-rails gem, we can handle such situation easily. To use this gem, we need to add it into our Gemfile. 1gem 'bower-rails', '~&gt; 0.9.2' Run bundle install.Then run 1rails g bower_rails:initialize This will add Bowerfile and initializers/bower_rails.rb. The Bowerfile is just like a Gemfile, but for bower. It uses an DSL developed to provide similar feel like using bundler. You might also want to modify you .gitignore to exclude the libraries managed by bower from your source control.Here is a sample .gitignore 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148# See https://help.github.com/articles/ignoring-files for more about ignoring files.## If you find yourself ignoring temporary files generated by your text editor# or operating system, you probably want to add a global ignore instead:# git config --global core.excludesfile '~/.gitignore_global'# Ignore bundler config./.bundle# Ignore the default SQLite database./db/*.sqlite3/db/*.sqlite3-journal# Ignore all logfiles and tempfiles./log/*!/log/.keep/tmp### Rails template*.rbccapybara-*.html.rspec/log/tmp/db/*.sqlite3/db/*.sqlite3-journal/public/system/coverage//spec/tmp**.origrerun.txtpickle-email-*.html# TODO Comment out these rules if you are OK with secrets being uploaded to the repoconfig/initializers/secret_token.rbconfig/secrets.yml## Environment normalisation:/.bundle/vendor/bundle# these should all be checked in to normalise the environment:# Gemfile.lock, .ruby-version, .ruby-gemset# unless supporting rvm &lt; 1.11.0 or doing something fancy, ignore this:.rvmrc# if using bower-rails ignore default bower_components path bower.json files/vendor/assets/bower_components*.bowerrcbower.json### SVN template.svn/### Windows template# Windows image file cachesThumbs.dbehthumbs.db# Folder config fileDesktop.ini# Recycle Bin used on file shares$RECYCLE.BIN/# Windows Installer files*.cab*.msi*.msm*.msp# Windows shortcuts*.lnk### JetBrains template# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm*.iml## Directory-based project format:.idea/# if you remove the above rule, at least ignore the following:# User-specific stuff:# .idea/workspace.xml# .idea/tasks.xml# .idea/dictionaries# Sensitive or high-churn files:# .idea/dataSources.ids# .idea/dataSources.xml# .idea/sqlDataSources.xml# .idea/dynamic.xml# .idea/uiDesigner.xml# Gradle:# .idea/gradle.xml# .idea/libraries# Mongo Explorer plugin:# .idea/mongoSettings.xml## File-based project format:*.ipr*.iws## Plugin-specific files:# IntelliJout/# mpeltonen/sbt-idea plugin.idea_modules/# JIRA pluginatlassian-ide-plugin.xml# Crashlytics plugin (for Android Studio and IntelliJ)com_crashlytics_export_strings.xmlcrashlytics.propertiescrashlytics-build.properties### OSX template.DS_Store.AppleDouble.LSOverride# Icon must end with two \\rIcon# Thumbnails._*# Files that might appear on external disk.Spotlight-V100.Trashes# Directories potentially created on remote AFP share.AppleDB.AppleDesktopNetwork Trash FolderTemporary Items.apdisk Use BootstrapInstall Bootstrap via BowerEdit Bowerfile, add 1asset 'bootstrap' Then run 1rake bower:install to install bootstrap. Use Bootstrap in railsEdit config/application.rb to add bower_components into asset pipeline. 123config.assets.paths &lt;&lt; Rails.root.join('vendor', 'assets', 'bower_components')# config.assets.paths &lt;&lt; Rails.root.join('vendor', 'assets', 'bower_components', 'bootstrap', 'dist', 'fonts')config.assets.precompile &lt;&lt; %r(.*.(?:eot|svg|ttf|woff|woff2)$) Edit app/assets/javascripts/application.js 1//= require bootstrap/dist/js/bootstrap Edit app/assets/stylesheets/application.css 1*= require bootstrap/dist/css/bootstrap Fix bootstrap fonts missing issueEdit config/initializers/bower_rails.rb, set bower_rails.resolve_before_precompile = true. This will run rake bower:resolve before compile. It will replace the url() in the css with &lt;%= asset_path() %&gt; helper. Verify that Bootstrap works in DevelopmentFirst we need to add a verification page. 1rails g controller page index Edit apps/views/page/index.html.erb 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;button type=\"button\" class=\"btn btn-default\" aria-label=\"Left Align\"&gt; &lt;span class=\"glyphicon glyphicon-align-left\" aria-hidden=\"true\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;button type=\"button\" class=\"btn btn-default btn-lg\"&gt; &lt;span class=\"glyphicon glyphicon-star\" aria-hidden=\"true\"&gt;&lt;/span&gt; Star&lt;/button&gt;&lt;!-- Single button --&gt;&lt;div class=\"btn-group\"&gt; &lt;button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\"&gt; Action &lt;span class=\"caret\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;ul class=\"dropdown-menu\" role=\"menu\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Another action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Something else here&lt;/a&gt;&lt;/li&gt; &lt;li class=\"divider\"&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Separated link&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;!-- Standard button --&gt;&lt;button type=\"button\" class=\"btn btn-default\"&gt;Default&lt;/button&gt;&lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&gt;&lt;button type=\"button\" class=\"btn btn-primary\"&gt;Primary&lt;/button&gt;&lt;!-- Indicates a successful or positive action --&gt;&lt;button type=\"button\" class=\"btn btn-success\"&gt;Success&lt;/button&gt;&lt;!-- Contextual button for informational alert messages --&gt;&lt;button type=\"button\" class=\"btn btn-info\"&gt;Info&lt;/button&gt;&lt;!-- Indicates caution should be taken with this action --&gt;&lt;button type=\"button\" class=\"btn btn-warning\"&gt;Warning&lt;/button&gt;&lt;!-- Indicates a dangerous or potentially negative action --&gt;&lt;button type=\"button\" class=\"btn btn-danger\"&gt;Danger&lt;/button&gt;&lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior --&gt;&lt;button type=\"button\" class=\"btn btn-link\"&gt;Link&lt;/button&gt; Start rails in development mode: 1rails s Access http://localhost:3000/page/index to make sure that Bootstrap works well in development mode. Verify Bootstrap works in production modeEdit config/secrets.yml to generate secret_key_base which is required to start WEBrick in produciton mode. 1rake secret Precompile assets from production 123RAILS_ENV=production rake assets:clobberRAILS_ENV=production rake assets:cleanRAILS_ENV=production rake assets:precompile Start WEBrick in production mode 1RAILS_SERVE_STATIC_FILES=true rails s -e production Note: RAILS_SERVE_STATIC_FILES=true is added here because by default static files like *.css will not beserved by WEBrick in produciton mode. Check config.serve_static_files in config/environments/production.rb for more details. Access http://localhost:3000/page/index to make sure that Bootstrap works well in production mode. Use MongoDBUse Mongoid as ORM driver. Edit Gemfile, 1gem 'mongoid', '~&gt; 4.0.0' Then run bundle install. Create mongoid.yml. 1rails g mongoid:config Create Controller1rails g scaffold Task name:string description:text status:string Restart your WEBrick server. Setup to use Bootstrap themeCheckout Bootstrap’s sample to setup the basic theme. Edit app/views/layouts/application.html.erb, 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;meta name=\"description\" content=\"\"&gt; &lt;meta name=\"author\" content=\"\"&gt; &lt;title&gt;Rivendell&lt;/title&gt; &lt;%= stylesheet_link_tag 'application', media: 'all' %&gt; &lt;%= csrf_meta_tags %&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"container\"&gt; &lt;nav class=\"navbar navbar-default\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\"&gt; &lt;span class=\"sr-only\"&gt;Toggle navigation&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;Rivendell&lt;/a&gt; &lt;/div&gt; &lt;div id=\"navbar\" class=\"collapse navbar-collapse\"&gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;li class=\"active\"&gt;&lt;%= link_to('Home', root_path) %&gt;&lt;/li&gt; &lt;li&gt;&lt;%= link_to('Tasks', tasks_path) %&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;!--/.nav-collapse --&gt; &lt;/nav&gt; &lt;%= yield %&gt;&lt;/div&gt;&lt;!-- /.container --&gt;&lt;%= javascript_include_tag 'application' %&gt;&lt;/body&gt;&lt;/html&gt; Note: &lt;%= javascript_include_tag &#39;application&#39; %&gt; is put at the bottom to speed up the page loading.","categories":[],"tags":[]},{"title":"An idea about designing a flexible system","slug":"an-idea-about-designing-a-flexible-system","date":"2014-10-08T13:13:00.000Z","updated":"2019-04-06T11:34:02.000Z","comments":true,"path":"2014/10/08/an-idea-about-designing-a-flexible-system/","link":"","permalink":"https://yuanhang.io/2014/10/08/an-idea-about-designing-a-flexible-system/","excerpt":"","text":"#An idea about desinging a flexible system Flexible means every components can choose its reaction on incoming events. A system is composited by plenty of components. The way how components connects to each other determines the “flexibility” of the system. There are plenty of ways of how two components can be connected. Command style.","categories":[],"tags":[]},{"title":"Extend Emacs with Emacs Lisp","slug":"extend-emacs-with-emacs-lisp","date":"2014-04-03T22:00:00.000Z","updated":"2019-04-06T11:34:02.000Z","comments":true,"path":"2014/04/03/extend-emacs-with-emacs-lisp/","link":"","permalink":"https://yuanhang.io/2014/04/03/extend-emacs-with-emacs-lisp/","excerpt":"","text":"#Extend Emacs with Emacs Lisp ##Start with an requirementI’ve heard a lot about the magic about Emacs. As a programmer, I’d very like to learn Emacs this way cause that feels natural for me. And I feel excited about the idea that I can make what I need for me. ##Start with a requirementI’m new to Emacs. And currently I’m facing a requirement of rename the current buffer and the corresponding file. I didn’t how to do that so I googled for answer, and found a solution from Matt Curtis. It’s a piece of Emacs Lisp code. 123456789101112131415;; source: http://steve.yegge.googlepages.com/my-dot-emacs-file(defun rename-file-and-buffer (new-name) &quot;Renames both current buffer and file it&apos;s visiting to NEW-NAME.&quot; (interactive &quot;sNew name: &quot;) (let ((name (buffer-name)) (filename (buffer-file-name))) (if (not filename) (message &quot;Buffer &apos;%s&apos; is not visiting a file!&quot; name) (if (get-buffer new-name) (message &quot;A buffer named &apos;%s&apos; already exists!&quot; new-name) (progn (rename-file name new-name 1) (rename-buffer new-name) (set-visited-file-name new-name) (set-buffer-modified-p nil)))))) ##How to extend EmacsThe first problem I need to resolve is how to get this code working with my Emacs. Create a .emacs file under your home folder. That is where you put your customization. Restart Emacs. M-x rename-file-and-buffer, enter. Input the new name. Then enter. # References Emacs Beginner’s HOWTO: Customizing Emacs","categories":[],"tags":[]},{"title":"Emacs again","slug":"emacs-again","date":"2014-04-03T14:33:00.000Z","updated":"2019-04-06T11:34:02.000Z","comments":true,"path":"2014/04/03/emacs-again/","link":"","permalink":"https://yuanhang.io/2014/04/03/emacs-again/","excerpt":"","text":"#Emacs Again ##Survive Open a file: C-x C-f Kill current buffer: C-x k Make a new file named hello.py under ~/workspace/python/hello.py. And the directory python does not exist: C-x C-f ~/workspace/python/hello.py RET M-x make-directory RET RET Save current buffer: C-x C-s Cancel current operation: C-g ##Move the cursor Forward a character: C-f Backward a character: C-b Move to the end of the line: C-e Move to the beginning of the line: C-a Move to the end of the buffer: M-&gt; ##Undo C-x u ##Quit Emacs C-x C-c quit C-z Minimize Emacs window ##Split window Split window horizontally: C-x 3 Split window vertically: C-x 2 Close ##BuffersRef:Buffers Switch to/Create buffer: C-x b [name] Switch to/Create buffer in new window: C-x 4 b [name] Switch to/Create buffer in new frame: C-x 5 b [name] Previous buffer: C-x &lt;LEFT&gt; List buffers: C-x C-b Toggle read-only status on buffer: C-x C-q Rename buffer: M-x rename-buffer ##Edit Duplicate current line: C-a C-SPACE C-n M-w C-y C-a: move to beginning of the line. C-SPACE: Begin a selection, set mark. C-n: Move to next line. M-w: Copy region. C-y: Yank. ##The official guideThe official version of this document. :) Newbie Wiki","categories":[],"tags":[]},{"title":"Blog on a new machine: using octopress and github pages","slug":"blog-on-a-new-machine-using-octopress-and-github-pages","date":"2013-07-22T14:51:00.000Z","updated":"2019-04-06T11:34:02.000Z","comments":true,"path":"2013/07/22/blog-on-a-new-machine-using-octopress-and-github-pages/","link":"","permalink":"https://yuanhang.io/2013/07/22/blog-on-a-new-machine-using-octopress-and-github-pages/","excerpt":"","text":"I have already create a github pages sometime before, using octopress,hosted on github.Today when I want to write a blog, I found I can not find the localcopy of the blog git repository to start. And I can’t find an instruction on howto reuse an existing octopress git repository to continue blogging onthe official octopress website. After somegoogling, here is how. ##Clone your existing blog repository git clone url_to_your_repositoryThe default branch after your checking out should be “master” branch.Since octopress stores the “posts/blogs” under branch “source”, andplace the generated static website under “master”, I have to check outthe “source” branch from the remote repository to continue blogging.This can be done by: git checkout source ##Install dependencies bundle installthis will get you all the required gems. ##Setup octopress to work with github pages rake setup_github_pages ##Setup localeSince I may use Chinese to blog, I have to setup the locale. Or therewill be errors like “invalid byte sequence in xxxx(ASCII-8bit?)”.On Mac OS X export LC_ALL=zh_CN.UTF-8On Windows set LC_ALL=zh_CN.UTF-8 ##Test if it worksFirst generate the static website from source. rake generateThen preview the website at local. rake previewThis action will start a embeded webserver (WebBrick) listen athttp://localhost:4000.The good thing is it will watch the file change and auto re-generate thewebsite if an change is detected. To view the latest website, all youneed to do is refresh the URL in your browser. ##Deploy it to github pages rake deploy ##Push your new blog to sourcerake deploy only push the generated website to “master” branch of theremote octopress repository. It will not automatically add your new post toyour local/remote repository. To save the new blog, you will need to addit to git, and then push it to remote “source”. git add . git ci -am “add new post” git push Go and check it!","categories":[{"name":"octopress","slug":"octopress","permalink":"https://yuanhang.io/categories/octopress/"}],"tags":[]},{"title":"A Programmer's way of blogging","slug":"a-programmers-way-of-blogging","date":"2013-03-17T10:10:00.000Z","updated":"2019-04-06T11:34:02.000Z","comments":true,"path":"2013/03/17/a-programmers-way-of-blogging/","link":"","permalink":"https://yuanhang.io/2013/03/17/a-programmers-way-of-blogging/","excerpt":"","text":"I like to keep my fingers on the keyboard and getting everything done.I like vim git github markdown There is a way of blogging using the combination of all of them. That iswhat I’m using (trying), Octopress. Until now, it feels great!","categories":[],"tags":[]}]}